// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // User Personal details
  id                String         @id @unique @default(uuid())
  firstName         String
  lastName          String
  email             String         @unique
  password          String
  phoneNumber       String         @unique
  DOB               String
  gender            String?
  companyName       String?
  // Verification details
  verifyOtp         String         @default("")
  verifyOtpExpireAt Int            @default(0)
  resetOtp          String         @default("")
  resetOtpExpireAt  Int            @default(0)
  // Time Stamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  lastLogin         DateTime?
  // Account Status 
  isActive          Boolean        @default(true)
  isVerified        Boolean        @default(false)
  role              Role           @default(CUSTOMER)
  // Adresses
  addresses         Address[]
  // Relations
  orders            Order[]
  reviews           Review[]
  wishlist          WishlistItem[]
  cart              CartItem[]

  @@map("users")
}

model Product {
  id              String            @id @unique @default(cuid())
  name            String
  description     String
  price           Decimal           @db.Decimal(10, 2)
  comparedPrice   Decimal?          @db.Decimal(10, 2)
  costPrice       Decimal?          @db.Decimal(10, 2)
  currency        String
  stock           Int?              @default(0)
  weight          Float?
  dimensions      String?
  isInStock       Boolean           @default(true)
  isFeatured      Boolean           @default(false)
  isDigital       Boolean           @default(false)
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  images          ProductImage[]
  category        ProductCategory   @relation(fields: [categoryId], references: [id])
  categoryId      String
  productFeatures ProductFeatures[]
  variants        ProductVariant[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  publishedAt     DateTime?
  orderItems      OrderItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  cartItems       CartItem[]

  @@map("products")
}

model ProductFeatures {
  id            String              @id @default(cuid())
  name          String
  featureType   ProductFeaturesType @relation(fields: [featureTypeId], references: [id])
  featureTypeId String
  product       Product             @relation(fields: [productId], references: [id])
  productId     String

  @@map("product_features")
}

model ProductFeaturesType {
  id       String            @id @default(cuid())
  name     String
  features ProductFeatures[]

  @@map("product_feature_type")
}

model ProductCategory {
  id      String      @id @default(cuid())
  name    String
  type    ProductType
  Product Product[]

  @@map("product_category")
}

model ProductVariant {
  id         String         @id @default(cuid())
  product    Product        @relation(fields: [productId], references: [id])
  productId  String
  name       String
  stock      Int            @default(0)
  weight     Float?
  dimensions String?
  images     ProductImage[]
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("product_variants")
}

model ProductImage {
  id        String          @id @default(cuid())
  url       String
  alt       String?
  sortOrder Int             @default(0)
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?
  createdAt DateTime        @default(now())

  @@map("product_images")
}

model Address {
  id             String      @id @default(cuid())
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  type           AddressType @default(SHIPPING)
  firstName      String
  lastName       String
  company        String?
  address1       String
  address2       String?
  city           String
  state          String
  zipCode        String
  country        String
  phone          String?
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  // Relations
  shippingOrders Order[]     @relation("ShippingAddress")
  billingOrders  Order[]     @relation("BillingAddress")

  @@map("addresses")
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  user        User   @relation(fields: [userId], references: [id])
  userId      String

  // Address information
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String

  // Order totals
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  shippingCost   Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)

  // Order status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shippedAt   DateTime?
  deliveredAt DateTime?

  // Relations
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
  variantId String?

  quantity Int
  price    Decimal @db.Decimal(10, 2) // Price at time of order
  total    Decimal @db.Decimal(10, 2)

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  variantId String?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  rating  Int // 1-5 stars
  title   String?
  comment String?

  isVerified  Boolean @default(false) // Verified purchase
  isPublished Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum ProductType {
  HOSTING
  HARDWARE
  SOFTWARE
  DOMAINS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Currency {
  USD
  EUR
  GBP
  AUD
  CAD
}
