// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // User Personal details
  id          String  @id @unique @default(uuid())
  firstName   String
  lastName    String
  email       String  @unique
  password    String
  phoneNumber String  @unique
  DOB         String
  gender      String?
  companyName String?

  // Verification details
  verifyOtp         String @default("")
  verifyOtpExpireAt Int    @default(0)
  resetOtp          String @default("")
  resetOtpExpireAt  Int    @default(0)

  // Time Stamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  // Account Status 
  isActive   Boolean @default(true)
  isVerified Boolean @default(false)
  role       Role    @default(CUSTOMER)

  // Adresses
  addresses Address[]

  // Relations
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
  cart     CartItem[]

  @@map("users")
}

model Product {
  id          String @id @unique @default(cuid())
  name        String
  description String

  // pricing
  price         Decimal @db.Decimal(10, 2)
  comparedPrice Decimal @db.Decimal(10, 2)
  costPrice     Decimal @db.Decimal(10, 2)
  currency      String

  // Inventory
  stock             Int  @default(0)
  lowStockThreshold Int? @default(10)

  // Physical Attributes
  weight     Float?
  dimensions String?

  // Product Status
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  isDigital  Boolean @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?

  images ProductImage[]

  // Categorization
  category Category?
  tags     ProductTag[]

  // Variants
  variants ProductVariant[]

  // Attributes
  attributes ProductAttribute[]

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String

  name String

  //  Inventory
  stock Int @default(0)

  // Physical attributes
  weight     Float?
  dimensions String?

  // Variant options
  options VariantOption[]

  // Media
  images ProductImage[]

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("product_variants")
}

model VariantOption {
  id        String         @id @default(cuid())
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  name  String
  value String

  @@map("variant_options")
}

model ProductAttribute {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  name  String // e.g., "Material", "Brand"
  value String // e.g., "Cotton", "Nike"

  @@map("product_attributes")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  sortOrder Int     @default(0)

  // Can belong to either product or variant
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?

  createdAt DateTime @default(now())

  @@map("product_images")
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  slug     String       @unique
  products ProductTag[]

  @@map("tags")
}

model ProductTag {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([productId, tagId])
  @@map("product_tags")
}

model Address {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type      AddressType @default(SHIPPING)
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?

  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  user        User   @relation(fields: [userId], references: [id])
  userId      String

  // Address information
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId  String

  // Order totals
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  shippingCost   Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)

  // Order status
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shippedAt   DateTime?
  deliveredAt DateTime?

  // Relations
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id      String @id @default(cuid())
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?

  quantity Int
  price    Decimal @db.Decimal(10, 2) // Price at time of order
  total    Decimal @db.Decimal(10, 2)

  @@map("order_items")
}

model CartItem {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  rating  Int // 1-5 stars
  title   String?
  comment String?

  isVerified  Boolean @default(false) // Verified purchase
  isPublished Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum Category {
  HOSTING
  HARDWARE
  SOFTWARE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}
